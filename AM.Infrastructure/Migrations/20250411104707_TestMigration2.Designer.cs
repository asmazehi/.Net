// <auto-generated />
using System;
using AM.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AM.Infrastructure.Migrations
{
    [DbContext(typeof(AMContext))]
    [Migration("20250411104707_TestMigration2")]
    partial class TestMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AM.ApplicationCore.Domain.Abonne", b =>
                {
                    b.Property<string>("CIN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<float>("Prenom")
                        .HasColumnType("real");

                    b.HasKey("CIN");

                    b.ToTable("Abonnes");
                });

            modelBuilder.Entity("AM.ApplicationCore.Domain.Compteur", b =>
                {
                    b.Property<string>("Reference")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AbonneCIN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<float>("Voltage")
                        .HasColumnType("real");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Reference");

                    b.HasIndex("AbonneCIN");

                    b.ToTable("Compteurs");
                });

            modelBuilder.Entity("AM.ApplicationCore.Domain.Facture", b =>
                {
                    b.Property<string>("CompteurReference")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CompteurKey");

                    b.Property<int>("PeriodeId")
                        .HasColumnType("int")
                        .HasColumnName("PeriodeKey");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("CompteurKey")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ConsommationKWH")
                        .HasColumnType("int");

                    b.Property<double>("Montant")
                        .HasColumnType("float");

                    b.Property<bool>("Payement")
                        .HasColumnType("bit");

                    b.Property<int>("PeriodeKey")
                        .HasColumnType("int");

                    b.HasKey("CompteurReference", "PeriodeId", "Date");

                    b.HasIndex("CompteurKey");

                    b.HasIndex("PeriodeKey");

                    b.ToTable("Factures", t =>
                        {
                            t.Property("CompteurKey")
                                .HasColumnName("CompteurKey1");

                            t.Property("PeriodeKey")
                                .HasColumnName("PeriodeKey1");
                        });
                });

            modelBuilder.Entity("AM.ApplicationCore.Domain.Periode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("Debut")
                        .HasColumnType("date");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("date");

                    b.HasKey("id");

                    b.ToTable("Periodes");
                });

            modelBuilder.Entity("AM.ApplicationCore.Domain.Compteur", b =>
                {
                    b.HasOne("AM.ApplicationCore.Domain.Abonne", "Abonne")
                        .WithMany("Compteurs")
                        .HasForeignKey("AbonneCIN");

                    b.Navigation("Abonne");
                });

            modelBuilder.Entity("AM.ApplicationCore.Domain.Facture", b =>
                {
                    b.HasOne("AM.ApplicationCore.Domain.Compteur", "Compteur")
                        .WithMany("Factures")
                        .HasForeignKey("CompteurKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AM.ApplicationCore.Domain.Periode", "Periode")
                        .WithMany("Factures")
                        .HasForeignKey("PeriodeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compteur");

                    b.Navigation("Periode");
                });

            modelBuilder.Entity("AM.ApplicationCore.Domain.Abonne", b =>
                {
                    b.Navigation("Compteurs");
                });

            modelBuilder.Entity("AM.ApplicationCore.Domain.Compteur", b =>
                {
                    b.Navigation("Factures");
                });

            modelBuilder.Entity("AM.ApplicationCore.Domain.Periode", b =>
                {
                    b.Navigation("Factures");
                });
#pragma warning restore 612, 618
        }
    }
}
